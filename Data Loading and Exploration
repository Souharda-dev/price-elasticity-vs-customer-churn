# Import necessary libraries
import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from sklearn.model_selection import train_test_split
from imblearn.over_sampling import SMOTE
from sklearn.preprocessing import StandardScaler, OneHotEncoder
from sklearn.compose import ColumnTransformer
from sklearn.pipeline import Pipeline
from sklearn.ensemble import RandomForestClassifier
from sklearn.metrics import classification_report, confusion_matrix, roc_auc_score
from sklearn.model_selection import GridSearchCV

# Load the dataset (assuming we have a CSV file with customer data)
# Note: In a real scenario, this would come from British Gas databases
try:
    df = pd.read_csv('british_gas_customer_data.csv')
    print("Data loaded successfully!")
except FileNotFoundError:
    print("Dataset file not found. Please ensure the path is correct.")
    # Creating a synthetic dataset for demonstration purposes
    np.random.seed(42)
    n_samples = 10000
    
    data = {
        'customer_id': range(1, n_samples+1),
        'tenure': np.random.randint(1, 72, n_samples),
        'monthly_charge': np.random.normal(45, 15, n_samples).round(2),
        'price_change_pct': np.random.uniform(-0.2, 0.2, n_samples).round(3),
        'contract_type': np.random.choice(['Monthly', 'Annual', 'Two Year'], n_samples, p=[0.4, 0.4, 0.2]),
        'payment_method': np.random.choice(['Direct Debit', 'Bank Transfer', 'Credit Card', 'Cash'], n_samples),
        'paperless_billing': np.random.choice(['Yes', 'No'], n_samples, p=[0.7, 0.3]),
        'usage_kwh': np.random.normal(300, 100, n_samples).round(2),
        'customer_service_calls': np.random.poisson(1, n_samples),
        'churn': np.random.choice([0, 1], n_samples, p=[0.85, 0.15])
    }
    
    df = pd.DataFrame(data)
    df.to_csv('british_gas_customer_data.csv', index=False)
    print("Created a synthetic dataset for demonstration purposes.")

# Explore the dataset
print("\nDataset Overview:")
print(df.head())
print("\nDataset Info:")
print(df.info())
print("\nDescriptive Statistics:")
print(df.describe(include='all'))
print("\nMissing Values:")
print(df.isnull().sum())

# Visualize the target variable distribution
plt.figure(figsize=(8, 6))
sns.countplot(x='churn', data=df)
plt.title('Customer Churn Distribution')
plt.xlabel('Churn Status (0=No, 1=Yes)')
plt.ylabel('Count')
plt.show()

# Analyze price change vs churn
plt.figure(figsize=(10, 6))
sns.boxplot(x='churn', y='price_change_pct', data=df)
plt.title('Price Change Percentage vs Churn')
plt.xlabel('Churn Status (0=No, 1=Yes)')
plt.ylabel('Price Change Percentage')
plt.show()
